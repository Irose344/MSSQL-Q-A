--1. Display the number of states present in the LocationTable.
Select count(distinct(State)) as No_of_States from Location
--2. How many products are of regular type?
select COUNT(*) as regular_products from product where type = 'regular'
--3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as Total_Spending from Fact where ProductId=1
--4. What is the minimum sales of a product?
select min(Sales) as min_sales from Fact
--5. Display the max Cost of Good Sold (COGS).
select max(COGS) as max_COGS from Fact
--6. Display the details of the product where product type is coffee.
select * from Product where Product_Type='Coffee'
--7. Display the details where total expenses are greater than 40.
select * from Fact where Total_Expenses>40
--8. What is the average sales in area code 719?
select avg(Sales) as avg_Sales from Fact where Area_Code=719
--9. Find out the total profit generated by Colorado state.
select sum(Profit) as Total_Profit
from Fact as F join Location as L
on F.Area_Code=L.Area_Code where L.State='Colorado'
--10. Display the average inventory for each product ID.
select ProductId,avg(Inventory) as avg_inventory from Fact
group by ProductId order by productId asc
--11. Display state in a sequential order in a Location Table.
select Distinct(State) from Location order by State
--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.
select ProductId,avg(Budget_Margin) as Avg_Budget_Margin from fact
group by ProductId having avg(Budget_Margin)>100 order by ProductId
--13. What is the total sales done on date 2010-01-01?
select sum(Sales) as Total_Sales from Fact where Date='2010-01-01'
--14. Display the average total expense of each product ID on an individual 
--date
select Date,ProductId,avg(Total_Expenses) as avg_Total_Expenses
from Fact group by ProductId,[Date] order by Date,ProductId
--15. Display the table with the following attributes such as date, productID,
--product_type, product, sales, profit, state, area_code.
select F.Date,F.ProductId,P.Product_Type,P.Product,F.Sales,F.Profit,
L.State,L.Area_Code
from Fact as F join Product as P on F.ProductId=P.ProductId
inner join Location as L on L.Area_Code=F.Area_Code

--16. Display the rank without any gap to show the sales wise rank.

select DENSE_RANK()over(order by Sales desc) as Sales_Rank, * from Fact

--17. Find the state wise profit and sales.
select L.State,sum(Profit) as sum_profit,sum(Sales) as sum_sales
from Fact as F join Location as L on L.Area_Code=F.Area_Code
group by L.state
--18. Find the state wise profit and sales along with the product name.
select 
L.State,P.Product,sum(F.Sales) as total_sales,sum(F.Profit) as total_profit
from Fact as F inner join Product as P
on F.ProductId=P.ProductId
inner join Location as L on F.Area_Code=L.Area_Code
group by L.State,P.Product


--19. If there is an increase in sales of 5%, calculate the increasedsales.

select productId,sales,(sales*105)/100 as increasedsales from fact

--20. Find the maximum profit along with the product ID and producttype.

select f.ProductId,p.Product_Type,f.Profit as maximum_profit from fact as f
join Product as p
on f.ProductId = p.ProductId
where f.Profit = (select max(Profit) from fact)
order by f.ProductId asc


--21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure Result
(
@prod_type varchar(50)
)
as
begin
select * from Product where Product_Type=@prod_type
end

exec Result 'Coffee'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.


select Total_Expenses,iif(sum(Total_Expenses)<60,'Profit','Less') as Profit_Or_Loss from Fact group by Total_Expenses
order by Total_expenses asc

--23. Give the total weekly sales value with the date and product ID details. 
--Use roll-up to pull the data in hierarchical order.
select Date,ProductId,sum(Sales) as total_sales from fact group by rollup(Date,ProductId)

--24. Apply union and intersection operator on the tables which consist of attribute area code.
select area_code from fact union select area_code from location

select area_code from fact intersect select area_code from location

--25. Create a user-defined function for the product table to fetch a particular product type based upon 
--the user’s preference.

create function Product_Detail
(
@prod_type varchar(50)
)
returns table
return
select * from Product where Product_Type=@prod_type

select * from Product_Detail('Coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

begin transaction
update Product set Product_Type='Tea' where ProductId=1
select * from Product where ProductId=1
rollback transaction
select * from Product where ProductId=1

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
select Date,ProductId,Sales from Fact where Total_Expenses between 100 and 200

--28. Delete the records in the Product Table for regular type.
delete from product where Type='Regular'


--29. Display the ASCII value of the fifth character from the columnProduct.
select Product,ascii(substring(Product,5,1)) ASCII_5th_Character from Product



